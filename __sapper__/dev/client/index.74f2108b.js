import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, v as validate_slots, g as goto, a as space, e as element, t as text, q as query_selector_all, b as detach_dev, c as claim_space, f as claim_element, h as children, j as claim_text, k as attr_dev, l as add_location, m as insert_dev, n as append_dev, o as listen_dev, p as noop, r as run_all } from './client.2588dbff.js';

/* src\routes\index.svelte generated by Svelte v3.31.1 */
const file = "src\\routes\\index.svelte";

function create_fragment(ctx) {
	let t0;
	let h1;
	let t1;
	let t2;
	let figure;
	let figcaption;
	let t3;
	let t4;
	let p;
	let strong;
	let t5;
	let t6;
	let button0;
	let t7;
	let t8;
	let button1;
	let t9;
	let mounted;
	let dispose;

	const block = {
		c: function create() {
			t0 = space();
			h1 = element("h1");
			t1 = text("Great success!");
			t2 = space();
			figure = element("figure");
			figcaption = element("figcaption");
			t3 = text("Have fun with Sapper!");
			t4 = space();
			p = element("p");
			strong = element("strong");
			t5 = text("Try editing this file (src/routes/index.svelte) to test live reloading.");
			t6 = space();
			button0 = element("button");
			t7 = text("notion.so örneği");
			t8 = space();
			button1 = element("button");
			t9 = text("notion.so örneği");
			this.h();
		},
		l: function claim(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-oh6yg0\"]", document.head);
			head_nodes.forEach(detach_dev);
			t0 = claim_space(nodes);
			h1 = claim_element(nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Great success!");
			h1_nodes.forEach(detach_dev);
			t2 = claim_space(nodes);
			figure = claim_element(nodes, "FIGURE", { class: true });
			var figure_nodes = children(figure);
			figcaption = claim_element(figure_nodes, "FIGCAPTION", {});
			var figcaption_nodes = children(figcaption);
			t3 = claim_text(figcaption_nodes, "Have fun with Sapper!");
			figcaption_nodes.forEach(detach_dev);
			figure_nodes.forEach(detach_dev);
			t4 = claim_space(nodes);
			p = claim_element(nodes, "P", { class: true });
			var p_nodes = children(p);
			strong = claim_element(p_nodes, "STRONG", {});
			var strong_nodes = children(strong);
			t5 = claim_text(strong_nodes, "Try editing this file (src/routes/index.svelte) to test live reloading.");
			strong_nodes.forEach(detach_dev);
			p_nodes.forEach(detach_dev);
			t6 = claim_space(nodes);
			button0 = claim_element(nodes, "BUTTON", {});
			var button0_nodes = children(button0);
			t7 = claim_text(button0_nodes, "notion.so örneği");
			button0_nodes.forEach(detach_dev);
			t8 = claim_space(nodes);
			button1 = claim_element(nodes, "BUTTON", {});
			var button1_nodes = children(button1);
			t9 = claim_text(button1_nodes, "notion.so örneği");
			button1_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			document.title = "Sapper project template";
			attr_dev(h1, "class", "svelte-1kwagh1");
			add_location(h1, file, 46, 0, 944);
			add_location(figcaption, file, 51, 1, 981);
			attr_dev(figure, "class", "svelte-1kwagh1");
			add_location(figure, file, 50, 0, 971);
			add_location(strong, file, 54, 3, 1042);
			attr_dev(p, "class", "svelte-1kwagh1");
			add_location(p, file, 54, 0, 1039);
			add_location(button0, file, 55, 0, 1135);
			add_location(button1, file, 56, 0, 1199);
		},
		m: function mount(target, anchor) {
			insert_dev(target, t0, anchor);
			insert_dev(target, h1, anchor);
			append_dev(h1, t1);
			insert_dev(target, t2, anchor);
			insert_dev(target, figure, anchor);
			append_dev(figure, figcaption);
			append_dev(figcaption, t3);
			insert_dev(target, t4, anchor);
			insert_dev(target, p, anchor);
			append_dev(p, strong);
			append_dev(strong, t5);
			insert_dev(target, t6, anchor);
			insert_dev(target, button0, anchor);
			append_dev(button0, t7);
			insert_dev(target, t8, anchor);
			insert_dev(target, button1, anchor);
			append_dev(button1, t9);

			if (!mounted) {
				dispose = [
					listen_dev(button0, "click", goto("/notionso"), false, false, false),
					listen_dev(button1, "click", goto("/airtable"), false, false, false)
				];

				mounted = true;
			}
		},
		p: noop,
		i: noop,
		o: noop,
		d: function destroy(detaching) {
			if (detaching) detach_dev(t0);
			if (detaching) detach_dev(h1);
			if (detaching) detach_dev(t2);
			if (detaching) detach_dev(figure);
			if (detaching) detach_dev(t4);
			if (detaching) detach_dev(p);
			if (detaching) detach_dev(t6);
			if (detaching) detach_dev(button0);
			if (detaching) detach_dev(t8);
			if (detaching) detach_dev(button1);
			mounted = false;
			run_all(dispose);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Routes", slots, []);
	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Routes> was created with unknown prop '${key}'`);
	});

	$$self.$capture_state = () => ({ goto });
	return [];
}

class Routes extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Routes",
			options,
			id: create_fragment.name
		});
	}
}

export default Routes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguNzRmMjEwOGIuanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9yb3V0ZXMvaW5kZXguc3ZlbHRlIl0sInNvdXJjZXNDb250ZW50IjpbIjxzdHlsZSBsYW5nPVwicG9zdGNzc1wiPlxuXHRoMSwgZmlndXJlLCBwIHtcblx0XHRAYXBwbHkgdGV4dC1jZW50ZXIgbXktMCBteC1hdXRvO1xuXHR9XG5cblx0aDEge1xuXHRcdEBhcHBseSB0ZXh0LTN4bCB1cHBlcmNhc2UgZm9udC1ib2xkIG0tMCBtYi00IHRleHQtb3JhbmdlLTUwMCBmb250LXNhbnM7XG5cdH1cblx0XG5cdGZpZ3VyZSB7XG5cdFx0QGFwcGx5IG0tMCBtYi00O1xuXHR9XG5cdFxuXHRwIHtcblx0XHRAYXBwbHkgbXktMCBteC1hdXRvO1xuXHR9XG5cblx0QHNjcmVlbiBtZCB7XG5cdFx0aDEge1xuXHRcdFx0QGFwcGx5IHRleHQtNXhsO1xuXHRcdH1cblx0fVxuPC9zdHlsZT5cbjxzY3JpcHQ+XG4gICAgaW1wb3J0IHsgZ290byB9IGZyb20gJ0BzYXBwZXIvYXBwJztcbjwvc2NyaXB0PlxuXG48c3ZlbHRlOmhlYWQ+XG5cdDx0aXRsZT5TYXBwZXIgcHJvamVjdCB0ZW1wbGF0ZTwvdGl0bGU+XG48L3N2ZWx0ZTpoZWFkPlxuXG48aDE+R3JlYXQgc3VjY2VzcyE8L2gxPlxuXG5cblxuPGZpZ3VyZT5cblx0PGZpZ2NhcHRpb24+SGF2ZSBmdW4gd2l0aCBTYXBwZXIhPC9maWdjYXB0aW9uPlxuPC9maWd1cmU+XG5cbjxwPjxzdHJvbmc+VHJ5IGVkaXRpbmcgdGhpcyBmaWxlIChzcmMvcm91dGVzL2luZGV4LnN2ZWx0ZSkgdG8gdGVzdCBsaXZlIHJlbG9hZGluZy48L3N0cm9uZz48L3A+XG48YnV0dG9uIG9uOmNsaWNrPXtnb3RvKFwiL25vdGlvbnNvXCIpfT5ub3Rpb24uc28gw7ZybmXEn2kgPC9idXR0b24+XG48YnV0dG9uIG9uOmNsaWNrPXtnb3RvKFwiL2FpcnRhYmxlXCIpfT5ub3Rpb24uc28gw7ZybmXEn2kgPC9idXR0b24+XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O2tDQXVEa0IsSUFBSSxDQUFDLFdBQVc7a0NBQ2hCLElBQUksQ0FBQyxXQUFXOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
